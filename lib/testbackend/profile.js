//prodfile.js
const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');

// Import User model (р╕Хр╣Йр╕нр╕Зр╣Бр╕Щр╣Ир╣Гр╕Ир╕зр╣Ир╕▓р╕бр╕╡ User model)
const User = mongoose.model('User');

// р╣Гр╕Кр╣Й db р╕Ир╕▓р╕Б mongoose
const db = mongoose.connection;

// ===== Schema р╣Бр╕ер╕░ Model р╕кр╕│р╕лр╕гр╕▒р╕Ъ RelationCodeMap =====
const relationCodeMapSchema = new mongoose.Schema({
  code: { type: String, required: true, unique: true },
  ownerId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  type: { type: String, enum: ['worker', 'farmer'], required: true },
  isUsed: { type: Boolean, default: false },
  createdAt: { type: Date, default: Date.now },
  expiresAt: { type: Date, default: Date.now, expires: 86400 } // р╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕ 24 р╕Кр╕▒р╣Ир╕зр╣Вр╕бр╕З
});
const RelationCodeMap = mongoose.model('RelationCodeMap', relationCodeMapSchema);

// ===== Schema р╣Бр╕ер╕░ Model р╕кр╕│р╕лр╕гр╕▒р╕Ъ Worker =====
const workerSchema = new mongoose.Schema({
  name: String,
  phone: String,
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' }, // user р╕Чр╕╡р╣Ир╣Ар╕Ыр╣Зр╕Щр╕Др╕Щр╕Зр╕▓р╕Щ
  ownerId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' }, // р╕нр╣Йр╕▓р╕Зр╕нр╕┤р╕Зр╣Ар╕Ир╣Йр╕▓р╕Вр╕нр╕З
  relationCode: String, // р╕гр╕лр╕▒р╕кр╕Др╕зр╕▓р╕бр╕кр╕▒р╕бр╕Юр╕▒р╕Щр╕Шр╣М
  createdAt: { type: Date, default: Date.now }
});
const Worker = mongoose.model('Worker', workerSchema);

// ===== Schema р╣Бр╕ер╕░ Model р╕кр╕│р╕лр╕гр╕▒р╕Ъ Farmer =====
const farmerSchema = new mongoose.Schema({
  name: String,
  phone: String,
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' }, // user р╕Чр╕╡р╣Ир╣Ар╕Ыр╣Зр╕Щр╕ер╕╣р╕Бр╣Др╕гр╣И
  ownerId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' }, // р╕нр╣Йр╕▓р╕Зр╕нр╕┤р╕Зр╣Ар╕Ир╣Йр╕▓р╕Вр╕нр╕З
  relationCode: String, // р╕гр╕лр╕▒р╕кр╕Др╕зр╕▓р╕бр╕кр╕▒р╕бр╕Юр╕▒р╕Щр╕Шр╣М
  createdAt: { type: Date, default: Date.now }
});
const Farmer = mongoose.model('Farmer', farmerSchema);

// р╕кр╕гр╣Йр╕▓р╕Зр╕гр╕лр╕▒р╕кр╕Др╕зр╕▓р╕бр╕кр╕▒р╕бр╕Юр╕▒р╕Щр╕Шр╣М (р╕кр╕╕р╣Ир╕бр╕гр╕лр╕▒р╕к)
function generateRelationCode() {
  const code = Math.random().toString(36).substring(2, 8).toUpperCase();
  console.log(`ЁЯО▓ Generated relation code: ${code} at ${new Date().toLocaleString('th-TH')}`);
  return code;
}

// р╕кр╕гр╣Йр╕▓р╕Зр╕гр╕лр╕▒р╕кр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Др╕Щр╕Зр╕▓р╕Щ
router.post('/create-worker-code', async (req, res) => {
  console.log('ЁЯУЮ API Called: /create-worker-code at', new Date().toLocaleString('th-TH'));
  console.log('ЁЯУЭ Request body:', req.body);
  
  try {
    const { ownerId } = req.body;
    
    if (!ownerId) {
      console.log('тЭМ Error: ownerId not provided');
      return res.status(400).json({ message: 'р╕Хр╣Йр╕нр╕Зр╕гр╕░р╕Ър╕╕ ownerId' });
    }

    console.log(`ЁЯСд Creating worker code for ownerId: ${ownerId}`);
    const code = generateRelationCode();
    
    // р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕гр╕лр╕▒р╕кр╕ер╕Зр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е
    const relationCode = new RelationCodeMap({
      code: code,
      ownerId: ownerId,
      type: 'worker',
      expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000) // р╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕р╣Гр╕Щ 24 р╕Кр╕▒р╣Ир╕зр╣Вр╕бр╕З
    });
    
    await relationCode.save();
    console.log(`тЬЕ Worker code saved to database: ${code}`);
    
    const response = { 
      success: true,
      code: code,
      message: 'р╕кр╕гр╣Йр╕▓р╕Зр╕гр╕лр╕▒р╕кр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Др╕Щр╕Зр╕▓р╕Щр╕кр╕│р╣Ар╕гр╣Зр╕И',
      expiresAt: relationCode.expiresAt
    };
    
    console.log('ЁЯУд Response sent:', response);
    res.status(200).json(response);
  } catch (error) {
    console.log('тЭМ Error in create-worker-code:', error.message);
    res.status(500).json({ 
      success: false,
      message: 'р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕Зр╕гр╕лр╕▒р╕к', 
      error: error.message 
    });
  }
});

// р╕кр╕гр╣Йр╕▓р╕Зр╕гр╕лр╕▒р╕кр╕кр╕│р╕лр╕гр╕▒р╕Ър╕ер╕╣р╕Бр╣Др╕гр╣И
router.post('/create-farmer-code', async (req, res) => {
  console.log('ЁЯУЮ API Called: /create-farmer-code at', new Date().toLocaleString('th-TH'));
  console.log('ЁЯУЭ Request body:', req.body);
  
  try {
    const { ownerId } = req.body;
    
    if (!ownerId) {
      console.log('тЭМ Error: ownerId not provided');
      return res.status(400).json({ message: 'р╕Хр╣Йр╕нр╕Зр╕гр╕░р╕Ър╕╕ ownerId' });
    }

    console.log(`ЁЯСд Creating farmer code for ownerId: ${ownerId}`);
    const code = generateRelationCode();
    
    // р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕гр╕лр╕▒р╕кр╕ер╕Зр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е
    const relationCode = new RelationCodeMap({
      code: code,
      ownerId: ownerId,
      type: 'farmer',
      expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000) // р╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕р╣Гр╕Щ 24 р╕Кр╕▒р╣Ир╕зр╣Вр╕бр╕З
    });
    
    await relationCode.save();
    console.log(`тЬЕ Farmer code saved to database: ${code}`);
    
    const response = { 
      success: true,
      code: code,
      message: 'р╕кр╕гр╣Йр╕▓р╕Зр╕гр╕лр╕▒р╕кр╕кр╕│р╕лр╕гр╕▒р╕Ър╕ер╕╣р╕Бр╣Др╕гр╣Ир╕кр╕│р╣Ар╕гр╣Зр╕И',
      expiresAt: relationCode.expiresAt
    };
    
    console.log('ЁЯУд Response sent:', response);
    res.status(200).json(response);
  } catch (error) {
    console.log('тЭМ Error in create-farmer-code:', error.message);
    res.status(500).json({ 
      success: false,
      message: 'р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕Зр╕гр╕лр╕▒р╕к', 
      error: error.message 
    });
  }
});

// р╣Ар╕Юр╕┤р╣Ир╕бр╕Др╕Щр╕Зр╕▓р╕Щ
router.post('/add-worker', async (req, res) => {
  try {
    const { relationCode } = req.body;
    const user = req.user; // р╕Хр╣Йр╕нр╕Зр╕бр╕╡ middleware auth
    
    if (!relationCode) {
      return res.status(400).json({ message: 'р╕Хр╣Йр╕нр╕Зр╕гр╕░р╕Ър╕╕р╕гр╕лр╕▒р╕кр╕Др╕зр╕▓р╕бр╕кр╕▒р╕бр╕Юр╕▒р╕Щр╕Шр╣М' });
    }

    // р╕лр╕▓ relation code р╣Бр╕ер╕░р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Др╕зр╕▓р╕бр╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З
    const relation = await RelationCodeMap.findOne({ 
      code: relationCode,
      type: 'worker',
      isUsed: false 
    });
    
    if (!relation) {
      return res.status(400).json({ message: 'р╕гр╕лр╕▒р╕кр╣Др╕бр╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З р╕лр╕гр╕╖р╕нр╕Цр╕╣р╕Бр╣Гр╕Кр╣Йр╣Др╕Ыр╣Бр╕ер╣Йр╕з р╕лр╕гр╕╖р╕нр╣Др╕бр╣Ир╣Гр╕Кр╣Ир╕гр╕лр╕▒р╕кр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Др╕Щр╕Зр╕▓р╕Щ' });
    }

    // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕р╕лр╕гр╕╖р╕нр╕вр╕▒р╕З
    if (relation.expiresAt < new Date()) {
      return res.status(400).json({ message: 'р╕гр╕лр╕▒р╕кр╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕р╣Бр╕ер╣Йр╕з' });
    }

    // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓ user р╕Др╕Щр╕Щр╕╡р╣Йр╣Ар╕Ыр╣Зр╕Щр╕Др╕Щр╕Зр╕▓р╕Щр╕Вр╕нр╕З owner р╕Др╕Щр╕Щр╕╡р╣Йр╕нр╕вр╕╣р╣Ир╣Бр╕ер╣Йр╕зр╕лр╕гр╕╖р╕нр╣Др╕бр╣И
    const existingWorker = await Worker.findOne({ 
      userId: user._id, 
      ownerId: relation.ownerId 
    });
    
    if (existingWorker) {
      return res.status(400).json({ message: 'р╕Др╕╕р╕Ур╣Ар╕Ыр╣Зр╕Щр╕Др╕Щр╕Зр╕▓р╕Щр╕Вр╕нр╕Зр╣Ар╕Ир╣Йр╕▓р╕Вр╕нр╕Зр╕Др╕Щр╕Щр╕╡р╣Йр╕нр╕вр╕╣р╣Ир╣Бр╕ер╣Йр╕з' });
    }

    // р╕кр╕гр╣Йр╕▓р╕З worker р╣Гр╕лр╕бр╣И
    const newWorker = new Worker({
      name: user.name,
      phone: user.phone,
      userId: user._id,
      ownerId: relation.ownerId,
      relationCode: relationCode
    });
    
    await newWorker.save();

    // р╕нр╕▒р╕Ыр╣Ар╕Фр╕Хр╕кр╕Цр╕▓р╕Щр╕░р╕гр╕лр╕▒р╕кр╣Гр╕лр╣Йр╣Ар╕Ыр╣Зр╕Щр╕Цр╕╣р╕Бр╣Гр╕Кр╣Йр╣Бр╕ер╣Йр╕з
    await RelationCodeMap.findByIdAndUpdate(relation._id, { isUsed: true });

    // р╕нр╕▒р╕Ыр╣Ар╕Фр╕Х user menu р╣Ар╕Ыр╣Зр╕Щ worker (menu3)
    await User.findByIdAndUpdate(user._id, { menu: 3 });

    res.status(200).json({ 
      success: true,
      message: 'р╣Ар╕Кр╕╖р╣Ир╕нр╕бр╣Вр╕вр╕Зр╣Ар╕Ыр╣Зр╕Щр╕Др╕Щр╕Зр╕▓р╕Щр╕кр╕│р╣Ар╕гр╣Зр╕И',
      worker: newWorker
    });
  } catch (error) {
    res.status(500).json({ 
      success: false,
      message: 'р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╣Ар╕Юр╕┤р╣Ир╕бр╕Др╕Щр╕Зр╕▓р╕Щ', 
      error: error.message 
    });
  }
});

// р╣Ар╕Юр╕┤р╣Ир╕бр╕ер╕╣р╕Бр╣Др╕гр╣И
router.post('/add-farmer', async (req, res) => {
  try {
    const { relationCode } = req.body;
    const user = req.user;
    
    if (!relationCode) {
      return res.status(400).json({ message: 'р╕Хр╣Йр╕нр╕Зр╕гр╕░р╕Ър╕╕р╕гр╕лр╕▒р╕кр╕Др╕зр╕▓р╕бр╕кр╕▒р╕бр╕Юр╕▒р╕Щр╕Шр╣М' });
    }

    // р╕лр╕▓ relation code р╣Бр╕ер╕░р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Др╕зр╕▓р╕бр╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З
    const relation = await RelationCodeMap.findOne({ 
      code: relationCode,
      type: 'farmer',
      isUsed: false 
    });
    
    if (!relation) {
      return res.status(400).json({ message: 'р╕гр╕лр╕▒р╕кр╣Др╕бр╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З р╕лр╕гр╕╖р╕нр╕Цр╕╣р╕Бр╣Гр╕Кр╣Йр╣Др╕Ыр╣Бр╕ер╣Йр╕з р╕лр╕гр╕╖р╕нр╣Др╕бр╣Ир╣Гр╕Кр╣Ир╕гр╕лр╕▒р╕кр╕кр╕│р╕лр╕гр╕▒р╕Ър╕ер╕╣р╕Бр╣Др╕гр╣И' });
    }

    // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕р╕лр╕гр╕╖р╕нр╕вр╕▒р╕З
    if (relation.expiresAt < new Date()) {
      return res.status(400).json({ message: 'р╕гр╕лр╕▒р╕кр╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕р╣Бр╕ер╣Йр╕з' });
    }

    // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓ user р╕Др╕Щр╕Щр╕╡р╣Йр╣Ар╕Ыр╣Зр╕Щр╕ер╕╣р╕Бр╣Др╕гр╣Ир╕Вр╕нр╕З owner р╕Др╕Щр╕Щр╕╡р╣Йр╕нр╕вр╕╣р╣Ир╣Бр╕ер╣Йр╕зр╕лр╕гр╕╖р╕нр╣Др╕бр╣И
    const existingFarmer = await Farmer.findOne({ 
      userId: user._id, 
      ownerId: relation.ownerId 
    });
    
    if (existingFarmer) {
      return res.status(400).json({ message: 'р╕Др╕╕р╕Ур╣Ар╕Ыр╣Зр╕Щр╕ер╕╣р╕Бр╣Др╕гр╣Ир╕Вр╕нр╕Зр╣Ар╕Ир╣Йр╕▓р╕Вр╕нр╕Зр╕Др╕Щр╕Щр╕╡р╣Йр╕нр╕вр╕╣р╣Ир╣Бр╕ер╣Йр╕з' });
    }

    // р╕кр╕гр╣Йр╕▓р╕З farmer р╣Гр╕лр╕бр╣И
    const newFarmer = new Farmer({
      name: user.name,
      phone: user.phone,
      userId: user._id,
      ownerId: relation.ownerId,
      relationCode: relationCode
    });
    
    await newFarmer.save();

    // р╕нр╕▒р╕Ыр╣Ар╕Фр╕Хр╕кр╕Цр╕▓р╕Щр╕░р╕гр╕лр╕▒р╕кр╣Гр╕лр╣Йр╣Ар╕Ыр╣Зр╕Щр╕Цр╕╣р╕Бр╣Гр╕Кр╣Йр╣Бр╕ер╣Йр╕з
    await RelationCodeMap.findByIdAndUpdate(relation._id, { isUsed: true });

    // р╕нр╕▒р╕Ыр╣Ар╕Фр╕Х user menu р╣Ар╕Ыр╣Зр╕Щ farmer (menu2)
    await User.findByIdAndUpdate(user._id, { menu: 2 });

    res.status(200).json({ 
      success: true,
      message: 'р╣Ар╕Кр╕╖р╣Ир╕нр╕бр╣Вр╕вр╕Зр╣Ар╕Ыр╣Зр╕Щр╕ер╕╣р╕Бр╣Др╕гр╣Ир╕кр╕│р╣Ар╕гр╣Зр╕И',
      farmer: newFarmer
    });
  } catch (error) {
    res.status(500).json({ 
      success: false,
      message: 'р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╣Ар╕Юр╕┤р╣Ир╕бр╕ер╕╣р╕Бр╣Др╕гр╣И', 
      error: error.message 
    });
  }
});

// р╕Фр╕╢р╕Зр╕Др╕Щр╕Зр╕▓р╕Щр╕Вр╕нр╕Зр╣Ар╕Ир╣Йр╕▓р╕Вр╕нр╕З
router.get('/workers/:ownerId', async (req, res) => {
  const { ownerId } = req.params;
  try {
    const workers = await Worker.find({ ownerId }).populate('userId', 'name email number profileImage username');
    res.status(200).json({
      success: true,
      workers: workers
    });
  } catch (error) {
    res.status(500).json({ 
      success: false,
      message: 'р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Др╕Щр╕Зр╕▓р╕Щ', 
      error: error.message 
    });
  }
});

// р╕Фр╕╢р╕Зр╕ер╕╣р╕Бр╣Др╕гр╣Ир╕Вр╕нр╕Зр╣Ар╕Ир╣Йр╕▓р╕Вр╕нр╕З
router.get('/farmers/:ownerId', async (req, res) => {
  const { ownerId } = req.params;
  try {
    const farmers = await Farmer.find({ ownerId }).populate('userId', 'name email number profileImage username');
    res.status(200).json({
      success: true,
      farmers: farmers
    });
  } catch (error) {
    res.status(500).json({ 
      success: false,
      message: 'р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╕╣р╕Бр╣Др╕гр╣И', 
      error: error.message 
    });
  }
});

// р╕Фр╕╢р╕Зр╕гр╕лр╕▒р╕кр╕Чр╕╡р╣Ир╕вр╕▒р╕Зр╣Др╕бр╣Ир╣Др╕Фр╣Йр╣Гр╕Кр╣Йр╕Вр╕нр╕Зр╣Ар╕Ир╣Йр╕▓р╕Вр╕нр╕З
router.get('/relation-codes/:ownerId', async (req, res) => {
  const { ownerId } = req.params;
  try {
    const codes = await RelationCodeMap.find({ 
      ownerId: ownerId,
      isUsed: false,
      expiresAt: { $gt: new Date() }
    }).sort({ createdAt: -1 });
    
    res.status(200).json({
      success: true,
      codes: codes
    });
  } catch (error) {
    res.status(500).json({ 
      success: false,
      message: 'р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕гр╕лр╕▒р╕к', 
      error: error.message 
    });
  }
});

// ===== р╕Вр╣Йр╕нр╕бр╕╣р╕е worker-info р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Чр╕Фр╕кр╕нр╕Ър╕Эр╕▒р╣Ир╕Зр╣Бр╕нр╕Ы =====
// GET /api/profile/worker-info/:userId -> р╕Др╕╖р╕Щ ownerId р╕Вр╕нр╕Зр╣Ар╕Ир╣Йр╕▓р╕Вр╕нр╕Зр╕Чр╕╡р╣Ир╕кр╕▒р╕бр╕Юр╕▒р╕Щр╕Шр╣Мр╕Бр╕▒р╕Ъ worker (userId р╕Др╕Щр╕Зр╕▓р╕Щ)
router.get('/worker-info/:userId', async (req, res) => {
  console.log('ЁЯФН DEBUG: /worker-info/:userId р╕Цр╕╣р╕Бр╣Ар╕гр╕╡р╕вр╕Б');
  console.log('ЁЯФН DEBUG: userId р╕Ир╕▓р╕Б params:', req.params.userId);
  
  try {
    const { userId } = req.params;
    const isValid = mongoose.Types.ObjectId.isValid(userId);
    const criteria = isValid ? { userId: new mongoose.Types.ObjectId(userId) } : { userId };
    
    console.log('ЁЯФН DEBUG: isValid ObjectId:', isValid);
    console.log('ЁЯФН DEBUG: criteria:', criteria);

    const worker = await mongoose.model('Worker').findOne(criteria);
    console.log('ЁЯФН DEBUG: worker р╕Чр╕╡р╣Ир╕Юр╕Ъ:', worker);

    if (!worker) {
      console.log('ЁЯФН DEBUG: р╣Др╕бр╣Ир╕Юр╕Ъ worker');
      return res.status(200).json({ success: true, worker: null });
    }

    const response = {
      success: true,
      worker: {
        userId: worker.userId?.toString?.() ?? worker.userId,
        ownerId: worker.ownerId?.toString?.() ?? worker.ownerId,
      }
    };
    
    console.log('ЁЯФН DEBUG: р╕кр╣Ир╕Зр╕Бр╕ер╕▒р╕Ъ response:', response);
    return res.status(200).json(response);
  } catch (error) {
    console.log('ЁЯФН DEBUG: Error:', error);
    return res.status(500).json({ success: false, message: 'р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Фр╕╢р╕З worker-info', error: error.message });
  }
});

module.exports = router;