const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');
const authMiddleware = require('../auth_middleware'); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö path ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
// ‡∏™‡∏£‡πâ‡∏≤‡∏á Schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
const equipmentSchema = new mongoose.Schema({
  userId: { type: String, required: true },
  name: { type: String, required: true },
  phone: { type: String, required: true },
  equipmentName: { type: String, required: true },
  description: { type: String, required: true },
  date: { type: Date, required: true },
  imagePaths: { type: [String], required: true },
  menu: { type: Number, required: true },
  createdAt: { type: Date, default: Date.now },
});

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Model ‡∏à‡∏≤‡∏Å Schema
const Equipment = mongoose.model('Equipment', equipmentSchema);

// ‡πÉ‡∏ä‡πâ authMiddleware ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå auth_middleware.js ‡πÅ‡∏ó‡∏ô

// ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get('/', authMiddleware, async (req, res) => {
  try {
    const userId = req.user.id;
    console.log('üîç Fetching equipment for userId:', userId);
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (frontend ‡∏à‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏≠‡∏á)
    const equipment = await Equipment.find({});
    
    console.log('‚úÖ Found equipment:', equipment.length);
    res.status(200).json(equipment);
  } catch (error) {
    console.error('‚ùå Error fetching equipment:', error);
    res.status(500).json({ 
      message: 'Error fetching equipment', 
      error: error.message 
    });
  }
});

// ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà
router.post('/', authMiddleware, async (req, res) => {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const { name, phone, equipmentName, description, date, imagePaths, menu } = req.body;
    
    if (!name || !phone || !equipmentName || !description || !date || !imagePaths || !menu) {
      return res.status(400).json({ message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
    }

    const newEquipment = new Equipment({
      userId: req.user.id, // ‡πÉ‡∏ä‡πâ userId ‡∏à‡∏≤‡∏Å authMiddleware
      name,
      phone,
      equipmentName,
      description,
      date: new Date(date),
      imagePaths,
      menu: Number(menu),
    });

    await newEquipment.save();
    console.log('‚úÖ Equipment saved:', newEquipment._id);
    res.status(201).json(newEquipment);
  } catch (error) {
    console.error('‚ùå Error saving equipment:', error);
    res.status(500).json({ 
      message: 'Error saving equipment',
      error: error.message 
    });
  }
});

// ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
router.put('/:id', authMiddleware, async (req, res) => {
  const { id } = req.params;
  
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const { name, phone, equipmentName, description, date, imagePaths, menu } = req.body;
    
    if (!name || !phone || !equipmentName || !description || !date || !imagePaths || !menu) {
      return res.status(400).json({ message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const equipment = await Equipment.findById(id);
    if (!equipment) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå' });
    }
    
    if (equipment.userId !== req.user.id) {
      return res.status(403).json({ message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ' });
    }

    const updatedEquipment = await Equipment.findByIdAndUpdate(
      id,
      {
        name,
        phone,
        equipmentName,
        description,
        date: new Date(date),
        imagePaths,
        menu: Number(menu),
      },
      { new: true }
    );
    
    console.log('‚úÖ Equipment updated:', id);
    res.status(200).json(updatedEquipment);
  } catch (error) {
    console.error('‚ùå Error updating equipment:', error);
    res.status(500).json({ 
      message: 'Error updating equipment',
      error: error.message 
    });
  }
});

// ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
router.delete('/:id', authMiddleware, async (req, res) => {
  const { id } = req.params;
  
  try {
    const equipment = await Equipment.findById(id);
    if (!equipment) {
      return res.status(404).json({ 
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå' 
      });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
    if (equipment.userId !== req.user.id && req.user.menu !== 1) {
      return res.status(403).json({ 
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ' 
      });
    }

    await Equipment.findByIdAndDelete(id);
    res.status(200).json({ 
      success: true,
      message: '‡∏•‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' 
    });
  } catch (error) {
    res.status(500).json({ 
      success: false,
      message: 'Error deleting equipment', 
      error: error.message 
    });
  }
});

module.exports = router;