// routes/cashAdvanceRoutes.js
const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');
const CashAdvance = require('../models/CashAdvance');
const Worker = require('../models/Worker');
const Farmer = require('../models/Farmer');

// Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö user-id header
const checkUserIdHeader = (req, res, next) => {
  // ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏±‡∏ö route /user-requests
  if (req.path.startsWith('/user-requests')) {
    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á userId ‡∏à‡∏≤‡∏Å params ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    const pathParts = req.path.split('/');
    const userId = pathParts[pathParts.length - 1]; // ‡∏î‡∏∂‡∏á userId ‡∏à‡∏≤‡∏Å path ‡πÅ‡∏ó‡∏ô

    const headerUserId = req.headers['user-id'];

    console.log('üîç Checking user-id header:', {
      path: req.path,
      extractedUserId: userId,
      headerUserId: headerUserId
    });

    if (!headerUserId) {
      console.log('‚ö†Ô∏è No user-id header found');
      return res.status(401).json({
        success: false,
        message: 'Missing user-id header'
      });
    }

    if (headerUserId !== userId) {
      console.log('‚ùå user-id header mismatch');
      return res.status(401).json({
        success: false,
        message: 'Unauthorized access - user-id header mismatch'
      });
    }

    console.log('‚úÖ user-id header matched, proceeding');
    return next();
  }
  next();
};

// ‡πÉ‡∏ä‡πâ middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å route ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ
router.use(checkUserIdHeader);

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô
router.get('/check-relation/:userId/:ownerId', async (req, res) => {
  const { userId, ownerId } = req.params;

  console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå:');
  console.log('   - userId:', userId);
  console.log('   - ownerId:', ownerId);

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á owner ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const worker = await Worker.findOne({
      userId: new mongoose.Types.ObjectId(userId),
      ownerId: new mongoose.Types.ObjectId(ownerId)
    });

    console.log('üë∑ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ô‡∏á‡∏≤‡∏ô:', worker);

    if (worker) {
      return res.json({
        success: true,
        type: 'worker',
        message: '‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ô‡∏µ‡πâ'
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏π‡∏Å‡πÑ‡∏£‡πà‡∏Ç‡∏≠‡∏á owner ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const farmer = await Farmer.findOne({
      userId: new mongoose.Types.ObjectId(userId),
      ownerId: new mongoose.Types.ObjectId(ownerId)
    });

    console.log('üë®‚Äçüåæ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏π‡∏Å‡πÑ‡∏£‡πà:', farmer);

    if (farmer) {
      return res.json({
        success: true,
        type: 'farmer',
        message: '‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏π‡∏Å‡πÑ‡∏£‡πà‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ô‡∏µ‡πâ'
      });
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå
    console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÉ‡∏î‡πÜ');
    res.json({
      success: false,
      message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ô‡∏µ‡πâ'
    });

  } catch (error) {
    console.error('‚ùå Error checking relation:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå',
      error: error.message
    });
  }
});

// ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô
// ‡πÉ‡∏ô route POST /request
router.post('/request', async (req, res) => {
  const { userId, ownerId, name, phone, purpose, amount, date, type, images } = req.body;

  console.log('üì• Received cash advance request:', {
    userId, ownerId, name, phone, purpose, amount, date, type, images
  });

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πàËôïÁêÜ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingRequest = await CashAdvance.findOne({
      userId: new mongoose.Types.ObjectId(userId),
      ownerId: new mongoose.Types.ObjectId(ownerId),
      status: 'pending'
    });

    if (existingRequest) {
      console.log('‚ùå Already has pending request');
      return res.status(400).json({
        success: false,
        message: '‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß'
      });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÉ‡∏´‡∏°‡πà
    const newRequest = new CashAdvance({
      userId: new mongoose.Types.ObjectId(userId),
      ownerId: new mongoose.Types.ObjectId(ownerId),
      name,
      phone,
      purpose, // ‚úÖ ‡πÉ‡∏ä‡πâ purpose ‡∏à‡∏≤‡∏Å request
      amount,
      date: new Date(date),
      type,
      images: images || [],
      status: 'pending'
    });

    await newRequest.save();

    console.log('‚úÖ Cash advance request saved:', newRequest._id);

    res.status(201).json({
      success: true,
      message: '‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢',
      requestId: newRequest._id
    });

  } catch (error) {
    console.error('‚ùå Error creating cash advance request:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠',
      error: error.message
    });
  }
});

// ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏≤‡∏° owner ‡πÅ‡∏•‡∏∞ type
// ‡πÉ‡∏ô cashAdvanceRoutes.js - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç endpoint /requests
router.get('/requests/:ownerId/:type', async (req, res) => {
  const { ownerId, type } = req.params;
  const headerUserId = req.headers['user-id'];

  console.log('üì• ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö owner:', ownerId, 'type:', type);
  console.log('üì• Header user-id:', headerUserId);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ header user-id ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö ownerId (‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
  if (headerUserId && headerUserId !== ownerId) {
    return res.status(401).json({
      success: false,
      message: 'Unauthorized access - ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ'
    });
  }

  try {
    // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á owner ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ pending
    const requests = await CashAdvance.find({
      ownerId: new mongoose.Types.ObjectId(ownerId),
      type: type,
      status: 'pending'
    }).populate('userId', 'name email number profileImage'); // populate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user

    console.log('‚úÖ ‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:', requests.length, '‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö', type);

    res.json({
      success: true,
      requests: requests
    });

  } catch (error) {
    console.error('‚ùå Error fetching cash advance requests:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠',
      error: error.message
    });
  }
});

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° endpoint ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á owner
router.get('/owner-requests/:ownerId', async (req, res) => {
  const { ownerId } = req.params;
  const headerUserId = req.headers['user-id'];

  console.log('üì• ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö owner:', ownerId);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
  if (headerUserId && headerUserId !== ownerId) {
    return res.status(401).json({
      success: false,
      message: 'Unauthorized access'
    });
  }

  try {
    // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á owner (‡∏ó‡∏±‡πâ‡∏á worker ‡πÅ‡∏•‡∏∞ farmer)
    const requests = await CashAdvance.find({
      ownerId: new mongoose.Types.ObjectId(ownerId),
      status: 'pending'
    }).populate('userId', 'name email number profileImage')
      .sort({ createdAt: -1 });

    console.log('‚úÖ ‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:', requests.length);

    res.json({
      success: true,
      requests: requests
    });

  } catch (error) {
    console.error('‚ùå Error fetching all owner requests:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
      error: error.message
    });
  }
});

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô
router.put('/request/:requestId', async (req, res) => {
  const { requestId } = req.params;
  const { status, approvalImage, rejectionReason } = req.body; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° rejectionReason
  const headerUserId = req.headers['user-id'];

  console.log('üì§ Updating request status:', {
    requestId,
    status,
    approvalImage,
    rejectionReason, // ‚úÖ log ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
    headerUserId
  });

  try {
    const updateData = {
      status: status,
      updatedAt: new Date()
    };

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
    if (approvalImage) {
      updateData.approvalImage = approvalImage;
      updateData.approvedAt = new Date();
    }

    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
    if (rejectionReason) {
      updateData.rejectionReason = rejectionReason;
      updateData.rejectedAt = new Date();
    }

    const updatedRequest = await CashAdvance.findByIdAndUpdate(
      requestId,
      updateData,
      { new: true }
    ).populate('userId', 'name email'); // ‚úÖ populate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user

    if (!updatedRequest) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô'
      });
    }

    console.log('‚úÖ Request updated successfully:', updatedRequest);

    res.json({
      success: true,
      message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢',
      request: updatedRequest
    });

  } catch (error) {
    console.error('‚ùå Error updating cash advance request:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞',
      error: error.message
    });
  }
});
// ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠ (soft delete - ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ß‡πâ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á)
// ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠ (soft delete)
router.delete('/request/:requestId', async (req, res) => {
  const { requestId } = req.params;
  const headerUserId = req.headers['user-id'];

  console.log('üóëÔ∏è Soft deleting request:', requestId);

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á
    const request = await CashAdvance.findById(requestId);
    if (!request) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô'
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (request.userId.toString() !== headerUserId) {
      return res.status(403).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ô‡∏µ‡πâ'
      });
    }

    // ‡∏ó‡∏≥ soft delete ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    const updatedRequest = await CashAdvance.findByIdAndUpdate(
      requestId,
      {
        status: 'deleted',
        deletedAt: new Date(),
        updatedAt: new Date()
      },
      { new: true }
    );

    console.log('‚úÖ Request soft deleted successfully');

    res.json({
      success: true,
      message: '‡∏•‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢'
    });

  } catch (error) {
    console.error('‚ùå Error soft deleting cash advance request:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠',
      error: error.message
    });
  }
});

// ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
router.get('/user-requests/:userId', async (req, res) => {
  const { userId } = req.params;
  const headerUserId = req.headers['user-id'];

  console.log('üì• ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user:', userId);
  console.log('üì• Headers user-id:', headerUserId);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ userId ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  if (!mongoose.Types.ObjectId.isValid(userId)) {
    return res.status(400).json({
      success: false,
      message: 'Invalid user ID format'
    });
  }


  try {
    const requests = await CashAdvance.find({
      userId: new mongoose.Types.ObjectId(userId),
      status: { $ne: 'deleted' } // ‚úÖ ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß
    })
      .populate('ownerId', 'name profileImage')
      .populate('userId', 'name profileImage')
      .sort({ createdAt: -1 });

    console.log('‚úÖ ‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:', requests.length);

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö frontend
    const formattedRequests = requests.map(request => ({
      _id: request._id,
      userId: request.userId,
      ownerId: request.ownerId,
      name: request.name,
      phone: request.phone,
      purpose: request.purpose, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
      amount: request.amount,
      date: request.date.toISOString(),
      type: request.type,
      status: request.status,
      images: request.images || [],
      approvalImage: request.approvalImage,
      approvedAt: request.approvedAt ? request.approvedAt.toISOString() : null,
      rejectedAt: request.rejectedAt ? request.rejectedAt.toISOString() : null, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢
      rejectionReason: request.rejectionReason, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢
      createdAt: request.createdAt.toISOString(),
      updatedAt: request.updatedAt.toISOString()
    }));

    res.json({
      success: true,
      requests: formattedRequests
    });

  } catch (error) {
    console.error('‚ùå Error fetching cash advance history:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥',
      error: error.message
    });
  }
});

module.exports = router;