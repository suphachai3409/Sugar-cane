// plotRoutes.js
const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');

// ‡πÉ‡∏ä‡πâ db ‡∏à‡∏≤‡∏Å mongoose
const db = mongoose.connection;

// POST /api/plots - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏•‡∏π‡∏Å‡πÉ‡∏´‡∏°‡πà
router.post('/', async (req, res) => {
  const { userId, ownerId, plotName, plantType, waterSource, soilType, latitude, longitude, polygonPoints } = req.body; // ‡πÄ‡∏û‡∏¥‡πà‡∏° ownerId

  try {
    const result = await db.collection('plots').insertOne({
      userId,
      ownerId, // ‡πÄ‡∏û‡∏¥‡πà‡∏° ownerId
      plotName,
      plantType,
      waterSource,
      soilType,
      latitude,
      longitude,
      polygonPoints: polygonPoints || [], // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
      createdAt: new Date()
    });
    console.log('‚úÖ kuy Plot saved:', {
      _id: result.insertedId,
      userId,
      ownerId,
      plotName,
      plantType,
      waterSource,
      soilType,
      latitude,
      longitude,
    });

    res.status(200).json({
      message: 'Plot saved successfully',
      plotId: result.insertedId
    });

  } catch (error) {
    console.error('‚ùå Error saving plot:', error);
    res.status(500).json({ error: 'Something went wrong' });
  }
});


// GET /api/plots/owner/:ownerId - ‡∏î‡∏∂‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏•‡∏π‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á
router.get('/owner/:ownerId', async (req, res) => {
  const { ownerId } = req.params;
  
  console.log('üîç DEBUG: /api/plots/owner/:ownerId ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å');
  console.log('üîç DEBUG: ownerId ‡∏à‡∏≤‡∏Å params:', ownerId);

  try {
    const query = { ownerId: ownerId };
    console.log('üîç DEBUG: query ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ:', query);
    
    const plots = await db.collection('plots').find(query).sort({ createdAt: -1 }).toArray();
    console.log('üîç DEBUG: plots ‡∏ó‡∏µ‡πà‡∏û‡∏ö:', plots);

    console.log(`‚úÖ Found ${plots.length} plots for ownerId: ${ownerId}`);
    res.json(plots); // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô array ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á

  } catch (error) {
    console.error('‚ùå Error fetching plots by ownerId:', error);
    res.status(500).json({ message: 'Error fetching plots', error: error.message });
  }
});


// GET /api/plots/:userId - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏•‡∏π‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á user
router.get('/:userId', async (req, res) => {
  const { userId } = req.params;

  try {
    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å ObjectId ‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö frontend
    const plots = await db.collection('plots').find({
      userId: userId // ‡πÉ‡∏ä‡πâ string ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ ‡πÑ‡∏°‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ObjectId
    }).sort({ createdAt: -1 }).toArray();

    console.log(`‚úÖ Found ${plots.length} plots for userId: ${userId}`);
    res.json(plots); // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô array ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ object)

  } catch (error) {
    console.error('‚ùå Error fetching plots:', error);
    res.status(500).json({ message: 'Error fetching plots', error: error.message });
  }
});

// GET /api/plots/count/:userId - ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏•‡∏π‡∏Å‡∏Ç‡∏≠‡∏á user
router.get('/count/:userId', async (req, res) => {
  const { userId } = req.params;

  try {
    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å ObjectId ‡πÄ‡∏õ‡πá‡∏ô string
    const count = await db.collection('plots').countDocuments({
      userId: userId // ‡πÉ‡∏ä‡πâ string ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
    });

    console.log(`‚úÖ Plot count for userId ${userId}: ${count}`);
    res.json({ count });

  } catch (error) {
    console.error('‚ùå Error counting plots:', error);
    res.status(500).json({ message: 'Error counting plots', error: error.message });
  }
});

// DELETE /api/plots/:plotId - ‡∏•‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏•‡∏π‡∏Å (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
router.delete('/:plotId', async (req, res) => {
  const { plotId } = req.params;

  try {
    if (!mongoose.Types.ObjectId.isValid(plotId)) {
      return res.status(400).json({ message: 'Invalid plotId format' });
    }

    const result = await db.collection('plots').deleteOne({
      _id: new mongoose.Types.ObjectId(plotId)
    });

    if (result.deletedCount === 0) {
      return res.status(404).json({ message: 'Plot not found' });
    }

    console.log(`‚úÖ Deleted plot: ${plotId}`);
    res.json({ message: 'Plot deleted successfully' });

  } catch (error) {
    console.error('‚ùå Error deleting plot:', error);
    res.status(500).json({ message: 'Error deleting plot', error: error.message });
  }
});

// PUT /api/plots/:plotId - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏•‡∏π‡∏Å (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
router.put('/:plotId', async (req, res) => {
  const { plotId } = req.params;
  const { plotName, plantType, waterSource, soilType, latitude, longitude, polygonPoints } = req.body; // ‡πÄ‡∏û‡∏¥‡πà‡∏° polygonPoints

  try {
    // ... (validate plotId)
    const result = await db.collection('plots').updateOne(
      { _id: new mongoose.Types.ObjectId(plotId) },
      {
        $set: {
          plotName,
          plantType,
          waterSource,
          soilType,
          latitude,
          longitude,
          polygonPoints: polygonPoints || [], // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
          updatedAt: new Date()
        }
      }
    );

    if (result.matchedCount === 0) {
      return res.status(404).json({ message: 'Plot not found' });
    }

    console.log(`‚úÖ Updated plot: ${plotId}`);
    res.json({ message: 'Plot updated successfully' });

  } catch (error) {
    console.error('‚ùå Error updating plot:', error);
    res.status(500).json({ message: 'Error updating plot', error: error.message });
  }
});

// POST /api/plots/:plotId/recommendations - ‡πÄ‡∏û‡∏¥‡πà‡∏° recommendation
router.post('/:plotId/recommendations', async (req, res) => {
  const { plotId } = req.params;
  const { topic, date, message, images } = req.body;

  try {
    if (!mongoose.Types.ObjectId.isValid(plotId)) {
      return res.status(400).json({ message: 'Invalid plotId format' });
    }

    const result = await db.collection('plots').updateOne(
      { _id: new mongoose.Types.ObjectId(plotId) },
      {
        $push: {
          recommendations: {
            topic,
            date,
            message,
            images: images || [],
            createdAt: new Date()
          }
        }
      }
    );

    if (result.matchedCount === 0) {
      return res.status(404).json({ message: 'Plot not found' });
    }

    console.log(`‚úÖ Added recommendation to plot: ${plotId}`);
    res.json({ message: 'Recommendation added successfully' });
  } catch (error) {
    console.error('‚ùå Error adding recommendation:', error);
    res.status(500).json({ message: 'Error adding recommendation', error: error.message });
  }
});

// GET /api/plots/:plotId/recommendations - ‡∏î‡∏∂‡∏á recommendations ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á plot
router.get('/:plotId/recommendations', async (req, res) => {
  const { plotId } = req.params;

  try {
    if (!mongoose.Types.ObjectId.isValid(plotId)) {
      return res.status(400).json({ message: 'Invalid plotId format' });
    }

    const plot = await db.collection('plots').findOne(
      { _id: new mongoose.Types.ObjectId(plotId) },
      { projection: { recommendations: 1 } }
    );

    if (!plot) {
      return res.status(404).json({ message: 'Plot not found' });
    }

    res.json(plot.recommendations || []);
  } catch (error) {
    console.error('‚ùå Error fetching recommendations:', error);
    res.status(500).json({ message: 'Error fetching recommendations', error: error.message });
  }
});
// GET /api/plots/:plotId/recommendations/:topic
router.get('/:plotId/recommendations/:topic', async (req, res) => {
  const { plotId, topic } = req.params;

  try {
    if (!mongoose.Types.ObjectId.isValid(plotId)) {
      return res.status(400).json({ message: 'Invalid plotId format' });
    }

    const plot = await db.collection('plots').findOne(
      {
        _id: new mongoose.Types.ObjectId(plotId),
        'recommendations.topic': topic
      },
      {
        projection: {
          'recommendations.$': 1
        }
      }
    );

    if (!plot || !plot.recommendations || plot.recommendations.length === 0) {
      return res.status(404).json({ message: 'Recommendation not found' });
    }

    res.json(plot.recommendations[0]);
  } catch (error) {
    console.error('‚ùå Error fetching recommendation:', error);
    res.status(500).json({ message: 'Error fetching recommendation', error: error.message });
  }
});

// PUT /api/plots/:plotId/recommendations/:topic
router.put('/:plotId/recommendations/:topic', async (req, res) => {
  const { plotId, topic } = req.params;
  const { date, message, images } = req.body;

  try {
    // Validate plotId
    if (!mongoose.Types.ObjectId.isValid(plotId)) {
      return res.status(400).json({ message: 'Invalid plotId format' });
    }

    // Check if recommendation exists
    const existingRec = await db.collection('plots').findOne({
      _id: new mongoose.Types.ObjectId(plotId),
      'recommendations.topic': topic
    });

    if (!existingRec) {
      return res.status(404).json({ message: 'Recommendation not found' });
    }

    // Update recommendation
    const result = await db.collection('plots').updateOne(
      { 
        _id: new mongoose.Types.ObjectId(plotId),
        'recommendations.topic': topic
      },
      { 
        $set: { 
          'recommendations.$.date': date,
          'recommendations.$.message': message,
          'recommendations.$.images': images || [],
          'recommendations.$.updatedAt': new Date()
        } 
      }
    );

    if (result.matchedCount === 0) {
      return res.status(404).json({ message: 'Recommendation not found' });
    }

    res.json({ message: 'Recommendation updated successfully' });
  } catch (error) {
    console.error('‚ùå Error updating recommendation:', error);
    res.status(500).json({ message: 'Error updating recommendation', error: error.message });
  }
});

// DELETE /api/plots/:plotId/recommendations/:topic - ‡∏•‡∏ö recommendation ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ topic ‡πÄ‡∏õ‡πá‡∏ô identifier
router.delete('/:plotId/recommendations/:topic', async (req, res) => {
  const { plotId, topic } = req.params;

  try {
    if (!mongoose.Types.ObjectId.isValid(plotId)) {
      return res.status(400).json({ message: 'Invalid plotId format' });
    }

    const result = await db.collection('plots').updateOne(
      { _id: new mongoose.Types.ObjectId(plotId) },
      {
        $pull: {
          recommendations: { topic: topic }
        }
      }
    );

    if (result.matchedCount === 0) {
      return res.status(404).json({ message: 'Plot not found' });
    }

    console.log(`‚úÖ Deleted recommendation from plot: ${plotId}, topic: ${topic}`);
    res.json({ message: 'Recommendation deleted successfully' });
  } catch (error) {
    console.error('‚ùå Error deleting recommendation:', error);
    res.status(500).json({ message: 'Error deleting recommendation', error: error.message });
  }
});
module.exports = router;
